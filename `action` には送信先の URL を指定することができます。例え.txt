`action` には送信先の URL を指定することができます。例えば、 `<form action="https://example.com">` とすると、データを **https://example.com** に送信します。

今回は `index.php` 内でデータを扱い、DB への保存処理を展開していくため、`action="/"` としてフォームが置かれた自身のページ `~~/public/index.php` に送信しています。

値を空、もしくは属性自体がない場合でも、フォームが置かれた自身のページに送信されます。

`form` タグの中には以下の 4 つを作成しています。

- 投稿者ニックネーム入力欄
- 投稿内容入力欄
- 発火するアクションを指定するための要素
- 投稿するボタン

それぞれ説明していきます。

### 投稿者ニックネーム入力欄について

```php
<div class="form-input-title">投稿者ニックネーム</div>
<input type="text" name="author_name" maxlength="40" value="" class="input-author-name" />
```

`input`タグはテキスト入力欄や実行ボタン等、 フォーム（`<form>`）を構成する部品を作成するタグです。

**各属性について**
**【type】**

type 属性の値により、1 行テキストボックス・チェックボックス・ラジオボタン・実行ボタン・リセットボタン等の部品となります。 この属性を指定しない場合の既定の型は“text”になります。 今回は、投稿者のニックネームが入力されることを想定しているので`type="text"`を指定します。 他にも type 属性には以下の値が設定できます。

- `type="text"`
    
    1 行テキストボックスをつくります。通常のテキストを入力するフィールドです。2 行以上にわたる長い文章を入力させたい場合には、`<textarea>`を使用します。
    
- `type="password"`
    
    パスワード入力ボックスをつくります。入力したテキストがアスタリスク（*）などに置き換えて表示されます。ただし、データが暗号化されるわけではないので、送信されたデータを受け取ることができれば内容を見ることができます。利用の際には注意してください。
    
- `type="checkbox"`
    
    チェックボックスをつくります。チェックボックスは複数選択が可能です。checked 属性を指定すると、その項目についてはあらかじめチェックの付いた状態となります。
    
- `type="button"`
    
    汎用ボタンをつくります。
    
- `type="submit"`
    
    送信ボタンをつくります。
    
- `type="hidden"`
隠しデータをサーバーに送信する際に使用します。このタイプのデータは、ブラウザ画面上には表示されません。value 属性で指定した値がサーバーへ送信されます。

※ただしデベロッパーツールで見ようと思えば見られるので、表示上隠されているだけだと思ってください。

引用: [HTML タグリファレンス_INPUT](http://www.htmq.com/html/input.shtml)

**【name】**

name 属性 は「要素の名前」を指定することができます。 PHP で扱う `$_GET` や `$_POST` でデータを受け取る際に、name 属性がリクエストパラメータ名になり、value 属性の値やテキストボックスに入力された値がそのパラメータの値になります。

**【value】**

input 要素の値を指定する属性。テキスト入力欄などにおいては初期入力値、チェックボックスやラジオボタンにおいては選択した時にだけ送信する値、送信ボタンなどにおいてはボタン名を表します。

ここでは、投稿された投稿者名を `$_POST['author_name']` のようにして受け取っています。

**【maxlength】**

`value`の最大長 (文字数)を指定します。

### 投稿内容入力欄について

```php
<div class="form-input-title">投稿内容<small>(必須)</small></div>
<textarea name="message" class="input-message"></textarea>
```

`<textarea>`は複数行の入力フィールドを作成するタグです。
`<textarea>`～`</textarea>`内に記述されたテキストは、入力フィールドの初期値として表示されます。

複数行のテキストを表すことが可能で、レビューのコメントやお問い合わせフォーム等のように、ユーザーが大量の自由記述テキストを入力できるようにするときに便利です。

**各属性について**

**【name】**

`<form>` における name と同じ役割です。

**【rows,cols】**

`<textarea>`が占める実際の大きさを指定することができます。サイズを指定することによる欠点として、文字数による指定になるため、文字のフォントによってはデザインが汚くなってしまいます。それを避けるため、今回は CSS で指定しています。

引用:[HTML タグリファレンス_TESTAREA](http://www.htmq.com/html/textarea.shtml)

### 発火するアクションを指定するための要素について

```php
<input type="hidden" name="action_type" value="insert" />
```

この`<input>`要素はブラウザに表示する必要は無いため、`type="hidden"`を指定し、value 属性で指定した値をがサーバーへ送信されます。これにより、ボタンがクリックされた時に、`$_POST`という変数に値を格納することができます。`name="action_type"`、`value="insert"`としているので、`$_POST['action_type']`という変数に“insert”という文字列を格納しています。

### 投稿するボタンについて
<button type="submit" class="input-submit-button">投稿する</button>
​
<button>タグは、ボタンを作成する際に使用され、<input>と同様に name や value 等の属性が指定できます。type 属性には 以下の３種類のいずれかを指定することができます。
【submit】
フォームのデータをサーバーへ送信します。これはこの属性が <form> に関連付けられたボタンに指定されていない場合、またはこの属性が空であったり不正な値であったりした場合の既定値です(初期値)。 form 内で type=‘submit’ が指定してある button 要素を押すと submit イベントが発火します。この<form> ~</form>で囲まれたブロックの中にあるテキストボックスやラジオボタンなどに入力された値を、submit はサーバー側や別ページに送信することができます。今回はこのボタンがクリックされた時に、ユーザが入力した投稿者ニックネーム、投稿内容、$_POST 変数に格納する文字列がサーバへ送られることになります。
【reset】
指定されたボタンはすべてのコントロールを初期値に初期化します。 <input type="reset"> と同様です。
button タグ単体の場合は既定の動作がなく、押されても何も行いません。上記要素のイベントを待ち受けし、イベントが発生すると起動されるクライアント側スクリプトを設定することができます。
引用:mdn web docs:ボタン要素

 input タグで作成したボタンとの違い <input type='submit' name='action' value='送信'>のようにしても送信ボタンを作成することができますが、input 要素のボタンとは異なり、button 要素では子要素を持つことができます。 また、input タグと違い、button タグには疑似要素が使うことができ､CSS でのデザインに自由度が高くなります。したがって、送信ボタンには button タグを利用するのが良いでしょう。 
